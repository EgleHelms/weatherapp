{"version":3,"sources":["components/Search.js","components/ResultDetails.js","components/ResultHourly.js","components/Result.js","assets/2844240.jpg","App.js","reportWebVitals.js","index.js"],"names":["RenderDiv","styled","div","Form","form","SearchBar","Input","input","SearchButton","button","Search","props","onSubmit","submit","type","value","placeholder","onChange","change","icon","faSearch","style","fontSize","color","DetailsContainer","FlexContainer","ResultDetails","weather","feel","pressure","sunrise","humidity","wind","sunset","ListContainer","ul","ListItem","li","Temp","h3","Time","span","Icon","img","ResultHourly","array","list","hourlyWeather","slice","map","el","Math","round","main","temp","src","dt_txt","dt","IconStyle","CurrTempStyle","CurrDescStyle","p","Result","width","display","justifyContent","flexWrap","marginBottom","city","country","marginTop","date","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","description","GlobalStyle","createGlobalStyle","BgImage","AppContainer","App","useState","setValue","weatherInfo","setWeather","error","setError","handleInput","e","target","handleSearch","preventDefault","REACT_APP_WEATHER_KEY","process","hourlyForecast","a","fetch","data1","data2","then","res1","res2","ok","Promise","all","json","Error","statusText","weekdays","months","getDate","Date","toLocaleDateString","getWeekday","getDay","arrayDate","split","weekday","day","month","formatDate","sys","toLocaleTimeString","weatherObj","name","feels_like","clouds","speed","catch","console","log","showResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a6ae16f.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\n\nconst RenderDiv = styled.div`\n  width: 50%;\n\n  @media (max-width: 550px) {\n    width: 100%;\n  }\n`\n\nconst Form = styled.form`\n  flex-basis: 100%;\n`\nconst SearchBar = styled.div`\n  height: 3rem;\n  border-radius: 30px;\n  font-family: inherit;\n  font-size: 1.5rem;\n  background-color: rgba(248,249,250,0.8);\n  display: flex;\n  justify-content: space-between;\n\n\n`\n\nconst Input = styled.input`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  margin-left: 30px;\n  font-size: 1.5rem;\n  width: 80%;\n`\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  padding-right: 20px;\n\n  &:focus{\n    background-color: transparent;\n    border: none;\n    outline: none\n  }\n`\n\nconst Search = (props) => {\n\n  const { REACT_APP_PLACES_KEY} = process.env\n  return (\n    <RenderDiv>\n        <Form onSubmit={props.submit}>\n            <SearchBar>\n              {/* <GooglePlacesAutocomplete apiKey={REACT_APP_PLACES_KEY}> */}\n            <Input  type=\"text\" value={props.value} placeholder=\"Enter city\" onChange={props.change}></Input>\n            {/* </GooglePlacesAutocomplete> */}\n            <SearchButton type=\"submit\"><FontAwesomeIcon icon={faSearch} style={{fontSize: \"1.5rem\", color: \"grey\"}}/></SearchButton>\n            </SearchBar>\n\n        </Form>\n    </RenderDiv>\n  );\n}\n\nexport default Search;\n","import styled from 'styled-components';\nimport React from 'react';\n\nconst DetailsContainer = styled.div`\nmin-width: 350px;\ndisplay: flex;\nbackground-color: rgba(248,249,250,0.4);\nborder-radius: 5px;\nmargin: 10px;\njustify-content: space-evenly;\n`\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  \n  p {\n    font-size: 1.5rem;\n    text-align: center;\n    margin-top: 30px;\n    margin-bottom: 3px;\n  }\n\n  span {\n    text-align: center;\n  }\n`\n\nconst ResultDetails = (props) => {\n\n  return (\n    <DetailsContainer>\n          <FlexContainer>\n              <p>{props.weather.feel}Â°C</p> <span>Feels like</span>\n              <p>{props.weather.pressure} hPa</p> <span>Preassure</span>\n              <p>{props.weather.sunrise}</p> <span>Sunrise</span>\n          </FlexContainer>\n          <FlexContainer>\n              <p>{props.weather.humidity} % </p> <span>Humidity</span>\n              <p>{props.weather.wind} m/s </p> <span>Wind speed</span>\n              <p>{props.weather.sunset}</p> <span>Sunset</span>\n          </FlexContainer>\n    </DetailsContainer>\n  );\n}\n\nexport default ResultDetails;\n","import styled from 'styled-components';\nimport React from 'react';\n\nconst ListContainer = styled.ul`\n    width: 90vw;\n    display: flex;\n    overflow-x: auto;\n\n    ::-webkit-scrollbar {\n        width: 20px;\n        }\n        \n    ::-webkit-scrollbar-track {\n        box-shadow: inset 0 0 5px rgba(248,249,250,0.2); \n        border-radius: 10px;\n        }\n        \n    ::-webkit-scrollbar-thumb {\n        background:rgba(248,249,250,0.4); \n        border-radius: 10px;\n        }\n        \n    ::-webkit-scrollbar-thumb:hover {\n        background: rgba(248,249,250,0.2); \n`\nconst ListItem = styled.li`\n    display: flex;\n    min-width: 15vh;\n    flex-direction: column;\n    align-items: center;\n    background-color: rgba(248,249,250,0.4);\n    margin: 10px;\n    border-radius: 5px;\n    font-family: inherit;\n`\n\nconst Temp = styled.h3`\n    margin-top: 15px;\n    margin-bottom: 5px;\n`\n\nconst Time = styled.span`\n    font-family: inherit;\n    font-size: 1.2rem;\n    margin-bottom: 15px;\n`\n\nconst Icon = styled.img`\n    max-width: 50px;\n`\n\nconst ResultHourly = (props) => {\n\n    const array = props.list.hourlyWeather.slice(0,15)\n\n  return (\n    <div>\n        <ul>\n            <h2>Forecast</h2>\n            <ListContainer>\n                {array.map(el => (\n                    <ListItem key={el.dt}>\n                        <Temp>{Math.round(el.main.temp)} Â°C</Temp>\n                        <Icon src={`https://openweathermap.org/img/w/${el.weather[0].icon}.png`}></Icon>\n                        <Time>{el.dt_txt.slice(10,13)}:00</Time>\n                    </ListItem>))} \n            </ListContainer>\n\n        </ul>\n    </div>\n  )\n}\n\nexport default ResultHourly;","import styled from 'styled-components';\nimport React from 'react';\nimport ResultDetails from \"./ResultDetails\";\nimport ResultHourly from \"./ResultHourly\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCloud, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faSmog} from '@fortawesome/free-solid-svg-icons';\n\nconst IconStyle = styled.span`\nfont-size: 4rem;\ncolor: black;\n`\nconst CurrTempStyle = styled.span`\nfont-size: 3rem;\nmargin-left: 20px;\n` \nconst CurrDescStyle = styled.p`\nfont-size: 1.5rem;\ntext-transform: capitalize;\n` \n\nconst Result = (props) => {\n\n  const main = props.weather.main;\n\nconst iconChoice = () =>{\n  if (main === 'Thunderstorm') {\n    return <FontAwesomeIcon icon={faBolt} />;\n  } else if (main === 'Drizzle') {\n    return <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (main === 'Rain') {\n    return <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (main === 'Snow') {\n    return <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (main === 'Clear') {\n    return <FontAwesomeIcon icon={faSun} />;\n  } else if (main === 'Clouds') {\n    return <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    return <FontAwesomeIcon icon={faSmog} />;\n  }\n}\n\n  return (\n<div>\n      <div  style={{width: \"100%\",display: \"flex\"}}>\n          <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\"}}>\n              <div>\n                <h1 style={{fontSize: \"2.5rem\", marginBottom:\"0\"}}>{props.weather.city}, {props.weather.country}</h1>\n                <h3 style={{marginTop:\"0\"}}>{props.weather.date}</h3>\n                <div>\n                  <IconStyle>{iconChoice()}</IconStyle>\n                  <CurrTempStyle>{props.weather.temp}Â°C</CurrTempStyle>\n                  <CurrDescStyle>{props.weather.description}</CurrDescStyle>\n                </div>\n              </div>\n              <ResultDetails weather={props.weather}/>\n          </div>\n      </div>\n      <div>\n          <ResultHourly list={props.weather} />\n        </div>\n</div>\n  );\n}\n\nexport default Result;\n","export default __webpack_public_path__ + \"static/media/2844240.72a83ab4.jpg\";","import styled, {createGlobalStyle} from 'styled-components';\nimport React, { useState } from 'react';\nimport Search from \"./components/Search\";\nimport Result from \"./components/Result\";\nimport BgImage from \"./assets/2844240.jpg\";\n\nconst GlobalStyle = createGlobalStyle`\n\n  body {\n    background-image: url(${BgImage});\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n    display: flex;\n    margin: 0;\n    padding: 0;\n  }\n\n  #root {\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n  }\n` \nconst AppContainer = styled.div`\n  width: 80%;\n  height: 80vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\nconst App = () => {\n\nconst [value, setValue] = useState(\"\");\nconst [weatherInfo, setWeather] = useState(null);\nconst [error, setError] = useState(false);\n\nconst handleInput = (e) =>{\n  setValue(e.target.value)\n}\n\nconst handleSearch = (e) =>{\n  e.preventDefault();\n  const { REACT_APP_WEATHER_KEY} = process.env\n  const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${REACT_APP_WEATHER_KEY}&units=metric`;\n  const hourlyForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${REACT_APP_WEATHER_KEY}&units=metric`;\n\n  async function weatherInfo(){\n    const data1 = await fetch(weather);\n    const data2 =await fetch(hourlyForecast);\n    return [data1, data2];\n} \n\n//Parallel fetch requests   https://dmitripavlutin.com/javascript-fetch-async-await/\n\nweatherInfo()\n.then(([res1, res2]) => {\n  if (res1.ok && res2.ok) {\n    return Promise.all([res1.json(), res2.json()]);\n  } else {\n    setError(true);\n    throw Error(res1.statusText, res2.statusText)\n  }\n})\n\n.then(([data1, data2]) => {\n  let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  function formatDate() {\n    const getDate = new Date().toLocaleDateString();\n    const getWeekday = new Date().getDay();\n    let arrayDate = getDate.split(\"/\");\n    let weekday = weekdays[getWeekday];\n    let day = arrayDate[1];\n    let month = months[arrayDate[0]-1];\n    return `${weekday} ${day} ${month}`\n  }\n\n  const date = formatDate();\n  const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString(\"de-DE\").slice(0, 5); \n  const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString(\"de-DE\").slice(0, 5);\n\n    const weatherObj = {\n      city: data1.name,\n      country: data1.sys.country,\n      date,\n      description: data1.weather[0].description,\n      main: data1.weather[0].main,\n      temp: Math.round(data1.main.temp),\n      feel: Math.round(data1.main.feels_like),\n      pressure: data1.main.pressure,\n      clouds: data1.clouds.all,\n      humidity: data1.main.humidity,\n      wind: data1.wind.speed,\n      sunset,\n      sunrise,\n      hourlyWeather: data2.list\n    }\n  setWeather(weatherObj);\n  setValue(\"\");\n  setError(false);\n})\n  .catch(error => {\n  console.log(error);\n})\n}\n\nif (error === true){\n  return (\n    <AppContainer>\n      <GlobalStyle/>\n      <h1>Weather App</h1>\n      <Search \n        value={value}\n        showResult={weatherInfo}\n        change={handleInput}\n        submit={handleSearch}\n      />\n      <h2>Sorry, could not find city you entered.</h2>\n    </AppContainer>\n  )\n\n} else{\n    return (\n    <AppContainer>\n      <GlobalStyle/>\n      <h1>Weather App</h1>\n      <Search \n        value={value}\n        showResult={weatherInfo}\n        change={handleInput}\n        submit={handleSearch}\n      />\n      {weatherInfo && <Result weather={weatherInfo}/>}\n    </AppContainer>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}