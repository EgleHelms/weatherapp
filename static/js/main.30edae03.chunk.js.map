{"version":3,"sources":["components/Search.js","components/ResultDetails.js","components/ResultHourly.js","components/Result.js","assets/2844240.jpg","App.js","reportWebVitals.js","index.js"],"names":["RenderDiv","styled","div","Form","form","SearchBar","Input","input","SearchButton","button","Search","props","onSubmit","submit","type","value","placeholder","onChange","change","icon","faSearch","style","fontSize","color","DetailsContainer","FlexContainer","ResultDetails","weather","feel","pressure","sunrise","humidity","wind","sunset","ListContainer","ul","ListItem","li","Temp","h3","Time","span","Icon","img","ResultHourly","array","list","hourlyWeather","slice","map","el","Math","round","main","temp","src","dt_txt","dt","IconStyle","CurrTempStyle","CurrDescStyle","p","CityWeather","Container1","Container2","Result","marginBottom","city","country","marginTop","date","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","description","GlobalStyle","createGlobalStyle","BgImage","AppContainer","Head","h1","TodaysResContainer","App","useState","setValue","weatherInfo","setWeather","error","setError","handleInput","e","target","handleSearch","preventDefault","REACT_APP_WEATHER_KEY","process","hourlyForecast","a","fetch","data1","data2","then","res1","res2","ok","Promise","all","json","Error","statusText","weekdays","months","getDate","Date","toLocaleDateString","getWeekday","getDay","arrayDate","split","weekday","day","month","formatDate","sys","toLocaleTimeString","weatherObj","name","feels_like","clouds","speed","catch","console","log","showResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30edae03.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\n\nconst RenderDiv = styled.div`\n  width: 50%;\n\n  @media (max-width: 550px) {\n    width: 100%;\n  }\n`\n\nconst Form = styled.form`\n  flex-basis: 100%;\n`\nconst SearchBar = styled.div`\n  height: 3rem;\n  border-radius: 30px;\n  font-family: inherit;\n  font-size: 1.5rem;\n  background-color: rgba(248,249,250,0.8);\n  display: flex;\n  justify-content: space-between;\n\n\n`\n\nconst Input = styled.input`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  margin-left: 30px;\n  font-size: 1.5rem;\n  width: 80%;\n`\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  padding-right: 20px;\n\n  &:focus{\n    background-color: transparent;\n    border: none;\n    outline: none\n  }\n`\n\nconst Search = (props) => {\n\n  return (\n    <RenderDiv>\n        <Form onSubmit={props.submit}>\n            <SearchBar>\n            <Input  type=\"text\" value={props.value} placeholder=\"Enter city\" onChange={props.change}></Input>\n            <SearchButton type=\"submit\"><FontAwesomeIcon icon={faSearch} style={{fontSize: \"1.5rem\", color: \"grey\"}}/></SearchButton>\n            </SearchBar>\n\n        </Form>\n    </RenderDiv>\n  );\n}\n\nexport default Search;\n","import styled from 'styled-components';\nimport React from 'react';\n\nconst DetailsContainer = styled.div`\n\ndisplay: flex;\nbackground-color: rgba(248,249,250,0.4);\nborder-radius: 5px;\njustify-content: space-evenly;\nflex-wrap: wrap;\npadding: 20px;\n\n@media (min-width: 700px) and (max-width: 900px) {\n  width: 50%;\n}\n\n@media (min-width: 901px) {\n  width: 40%;\n}\n\n\n@media (max-width: 330px) {\n  width: 80%;\n  flex-wrap: wrap;\n}\n\n`\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  \n  p {\n    font-size: 1.5rem;\n    text-align: center;\n    margin-top: 30px;\n    margin-bottom: 3px;\n  }\n\n  span {\n    text-align: center;\n  }\n`\n\nconst ResultDetails = (props) => {\n\n  return (\n    <DetailsContainer>\n          <FlexContainer>\n              <p>{props.weather.feel}Â°C</p> <span>Feels like</span>\n              <p>{props.weather.pressure} hPa</p> <span>Preassure</span>\n              <p>{props.weather.sunrise}</p> <span>Sunrise</span>\n          </FlexContainer>\n          <FlexContainer>\n              <p>{props.weather.humidity} % </p> <span>Humidity</span>\n              <p>{props.weather.wind} m/s </p> <span>Wind speed</span>\n              <p>{props.weather.sunset}</p> <span>Sunset</span>\n          </FlexContainer>\n    </DetailsContainer>\n  );\n}\n\nexport default ResultDetails;\n","import styled from 'styled-components';\nimport React from 'react';\n\nconst ListContainer = styled.ul`\n    padding: 0;\n    width: 80vw;\n    display: flex;\n    overflow-x: auto;\n\n    ::-webkit-scrollbar {\n        width: 20px;\n        }\n        \n    ::-webkit-scrollbar-track {\n        box-shadow: inset 0 0 5px rgba(248,249,250,0.2); \n        border-radius: 10px;\n        }\n        \n    ::-webkit-scrollbar-thumb {\n        background:rgba(248,249,250,0.4); \n        border-radius: 10px;\n        }\n        \n    ::-webkit-scrollbar-thumb:hover {\n        background: rgba(248,249,250,0.2); \n`\nconst ListItem = styled.li`\n    display: flex;\n    min-width: 15vh;\n    flex-direction: column;\n    align-items: center;\n    background-color: rgba(248,249,250,0.4);\n    margin: 10px 10px 10px 0;\n    border-radius: 5px;\n    font-family: inherit;\n`\n\nconst Temp = styled.h3`\n    margin-top: 15px;\n    margin-bottom: 5px;\n`\n\nconst Time = styled.span`\n    font-family: inherit;\n    font-size: 1.2rem;\n    margin-bottom: 15px;\n`\n\nconst Icon = styled.img`\n    max-width: 50px;\n`\n\nconst ResultHourly = (props) => {\n\n    const array = props.list.hourlyWeather.slice(0,15)\n\n  return (\n    <div>\n        <ul>\n            <h2>Forecast</h2>\n            <ListContainer>\n                {array.map(el => (\n                    <ListItem key={el.dt}>\n                        <Temp>{Math.round(el.main.temp)} Â°C</Temp>\n                        <Icon src={`https://openweathermap.org/img/w/${el.weather[0].icon}.png`}></Icon>\n                        <Time>{el.dt_txt.slice(10,13)}:00</Time>\n                    </ListItem>))} \n            </ListContainer>\n\n        </ul>\n    </div>\n  )\n}\n\nexport default ResultHourly;","import styled from 'styled-components';\nimport React from 'react';\nimport ResultDetails from \"./ResultDetails\";\nimport ResultHourly from \"./ResultHourly\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCloud, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faSmog} from '@fortawesome/free-solid-svg-icons';\n\nconst IconStyle = styled.span`\nfont-size: 4rem;\ncolor: black;\n`\nconst CurrTempStyle = styled.span`\nfont-size: 3rem;\nmargin-left: 20px;\n` \nconst CurrDescStyle = styled.p`\nfont-size: 2rem;\ntext-transform: capitalize;\n` \nconst CityWeather = styled.div`\n@media (min-width: 600px) {\n  margin-right: 30px;\n}\n` \nconst Container1 = styled.div`\n  display: flex;\n  justify-content: center;\n\n  @media (min-width: 800px) {\n    flex-wrap: wrap;\n  }\n`\n\nconst Container2 = styled.div`\n  width: 80%;\n  display: flex; \n  flex-wrap: wrap;\n  justify-content: center;\n\n  @media (min-width: 800px) {\n    flex-wrap: wrap;\n  }\n`\n\nconst Result = (props) => {\n\n  const main = props.weather.main;\n\nconst iconChoice = () =>{\n  if (main === 'Thunderstorm') {\n    return <FontAwesomeIcon icon={faBolt} />;\n  } else if (main === 'Drizzle') {\n    return <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (main === 'Rain') {\n    return <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (main === 'Snow') {\n    return <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (main === 'Clear') {\n    return <FontAwesomeIcon icon={faSun} />;\n  } else if (main === 'Clouds') {\n    return <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    return <FontAwesomeIcon icon={faSmog} />;\n  }\n}\n\n  return (\n<div>\n      <Container1>\n          <Container2>\n              <CityWeather>\n                <h1 style={{fontSize: \"2.5rem\", marginBottom:\"0\"}}>{props.weather.city}, {props.weather.country}</h1>\n                <h3 style={{marginTop:\"0\"}}>{props.weather.date}</h3>\n                <div>\n                  <IconStyle>{iconChoice()}</IconStyle>\n                  <CurrTempStyle>{props.weather.temp}Â°C</CurrTempStyle>\n                  <CurrDescStyle>{props.weather.description}</CurrDescStyle>\n                </div>\n              </CityWeather>\n              <ResultDetails weather={props.weather}/>\n          </Container2>\n      </Container1>\n              <div>\n          <ResultHourly list={props.weather} />\n        </div>\n</div>\n  );\n}\n\nexport default Result;\n","export default __webpack_public_path__ + \"static/media/2844240.72a83ab4.jpg\";","import styled, {createGlobalStyle} from 'styled-components';\nimport React, { useState } from 'react';\nimport Search from \"./components/Search\";\nimport Result from \"./components/Result\";\nimport BgImage from \"./assets/2844240.jpg\";\n\nconst GlobalStyle = createGlobalStyle`\n\n  body {\n    background-image: url(${BgImage});\n    background-position: center center;\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-size: cover;\n    display: flex;\n    margin: 0;\n    padding: 0;\n  }\n\n  #root {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n` \n\nconst AppContainer = styled.div`\n  margin-top: 100px;\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  \n`\n\nconst Head = styled.h1`\n  margin: 50px;\n\n  @media (max-width: 400px) {\n    margin: 0 0 20px 0;\n  }\n`\n\nconst TodaysResContainer = styled.div`\n  margin-top: 20px;\n`\n\nconst App = () => {\n\nconst [value, setValue] = useState(\"\");\nconst [weatherInfo, setWeather] = useState(null);\nconst [error, setError] = useState(false);\n\nconst handleInput = (e) =>{\n  setValue(e.target.value)\n}\n\nconst handleSearch = (e) =>{\n  e.preventDefault();\n  const { REACT_APP_WEATHER_KEY} = process.env\n  const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${REACT_APP_WEATHER_KEY}&units=metric`;\n  const hourlyForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${REACT_APP_WEATHER_KEY}&units=metric`;\n\n  async function weatherInfo(){\n    const data1 = await fetch(weather);\n    const data2 =await fetch(hourlyForecast);\n    return [data1, data2];\n} \n\n//Parallel fetch requests   https://dmitripavlutin.com/javascript-fetch-async-await/\n\nweatherInfo()\n.then(([res1, res2]) => {\n  if (res1.ok && res2.ok) {\n    return Promise.all([res1.json(), res2.json()]);\n  } else {\n    setError(true);\n    throw Error(res1.statusText, res2.statusText)\n  }\n})\n\n.then(([data1, data2]) => {\n  let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  function formatDate() {\n    const getDate = new Date().toLocaleDateString();\n    const getWeekday = new Date().getDay();\n    let arrayDate = getDate.split(\"/\");\n    let weekday = weekdays[getWeekday];\n    let day = arrayDate[1];\n    let month = months[arrayDate[0]-1];\n    return `${weekday} ${day} ${month}`\n  }\n\n  const date = formatDate();\n  const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString(\"de-DE\").slice(0, 5); \n  const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString(\"de-DE\").slice(0, 5);\n\n    const weatherObj = {\n      city: data1.name,\n      country: data1.sys.country,\n      date,\n      description: data1.weather[0].description,\n      main: data1.weather[0].main,\n      temp: Math.round(data1.main.temp),\n      feel: Math.round(data1.main.feels_like),\n      pressure: data1.main.pressure,\n      clouds: data1.clouds.all,\n      humidity: data1.main.humidity,\n      wind: data1.wind.speed,\n      sunset,\n      sunrise,\n      hourlyWeather: data2.list\n    }\n  setWeather(weatherObj);\n  setValue(\"\");\n  setError(false);\n})\n  .catch(error => {\n  console.log(error);\n})\n}\n\nif (error === true){\n  return (\n    <AppContainer>\n      <GlobalStyle/>\n      <h1>Weather App</h1>\n      <Search \n        value={value}\n        showResult={weatherInfo}\n        change={handleInput}\n        submit={handleSearch}\n      />\n      <h2>Sorry, could not find city you entered.</h2>\n    </AppContainer>\n  )\n\n} else{\n    return (\n    <AppContainer>\n      <GlobalStyle/>\n      <Head>Weather App</Head>\n      <Search \n        value={value}\n        showResult={weatherInfo}\n        change={handleInput}\n        submit={handleSearch}\n      />\n      <TodaysResContainer>{weatherInfo && <Result weather={weatherInfo}/>}</TodaysResContainer>\n    </AppContainer>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}